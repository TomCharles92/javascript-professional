<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">   <!--定义字符编码格式-->
    <title>Prototype Pattern Example</title>
    <script type="text/javascript">
    
        function Person(){
        }
        
        Person.prototype.name = "Nicholas";
        Person.prototype.age = 29;
        Person.prototype.job = "Software Engineer";
        Person.prototype.sayName = function(){
        };
        
        var person1 = new Person();
        person1.sayName();   //"Nicholas"
        
        var person2 = new Person();
        person2.sayName();   //"Nicholas"
      
        console.log(person1.sayName === person2.sayName, '新对象的所有属性和方法是由所有实例共享的');  //true
        console.log(Person.prototype.isPrototypeOf(person1), 'Person.prototype是person1的原型');  //true
        console.log(Person.prototype.isPrototypeOf(person2), 'Person.prototype是person2的原型');  //true
        // console.log(Person.isPrototypeOf(person1))

        //only works if Object.getPrototypeOf() is available
        if (Object.getPrototypeOf){
            console.log(Object.getPrototypeOf(person1) === Person.prototype, "通过Object.getPrototypeOf()方法，我们知道perons1实例的原型就是 Person.prototype）", Object.getPrototypeOf(person1), Person.prototype);  //true
            console.log(person1)
            console.log(Object.getPrototypeOf(person1))
            console.log(Object.getPrototypeOf(person1).name);  //"Nicholas"
            console.log('使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。')
            console.log("person1对象：", person1);
            console.log("person1的原型对象中有一个contructor属性，该contructor包含了一个指针，指向了一个对象。这里是Person，它是prototype所在的函数。")
            console.log('Object.getPrototypeOf(person1)，这个方法返回了原型对象，除了之前定义在原型上的属性和方法，还有一个constructor。这个constructor指向了构造函数Person')
        }
        
    </script>
</head>
<body>

</body>
</html>